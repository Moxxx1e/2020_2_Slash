// Code generated by MockGen. DO NOT EDIT.
// Source: internal/country/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCountryRepository is a mocks of CountryRepository interface
type MockCountryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRepositoryMockRecorder
}

// MockCountryRepositoryMockRecorder is the mocks recorder for MockCountryRepository
type MockCountryRepositoryMockRecorder struct {
	mock *MockCountryRepository
}

// NewMockCountryRepository creates a new mocks instance
func NewMockCountryRepository(ctrl *gomock.Controller) *MockCountryRepository {
	mock := &MockCountryRepository{ctrl: ctrl}
	mock.recorder = &MockCountryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCountryRepository) EXPECT() *MockCountryRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockCountryRepository) Insert(country *models.Country) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", country)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockCountryRepositoryMockRecorder) Insert(country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCountryRepository)(nil).Insert), country)
}

// Update mocks base method
func (m *MockCountryRepository) Update(country *models.Country) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", country)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCountryRepositoryMockRecorder) Update(country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCountryRepository)(nil).Update), country)
}

// DeleteByID mocks base method
func (m *MockCountryRepository) DeleteByID(countryID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", countryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockCountryRepositoryMockRecorder) DeleteByID(countryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCountryRepository)(nil).DeleteByID), countryID)
}

// SelectByID mocks base method
func (m *MockCountryRepository) SelectByID(countryID uint64) (*models.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", countryID)
	ret0, _ := ret[0].(*models.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockCountryRepositoryMockRecorder) SelectByID(countryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockCountryRepository)(nil).SelectByID), countryID)
}

// SelectByName mocks base method
func (m *MockCountryRepository) SelectByName(name string) (*models.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByName", name)
	ret0, _ := ret[0].(*models.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByName indicates an expected call of SelectByName
func (mr *MockCountryRepositoryMockRecorder) SelectByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByName", reflect.TypeOf((*MockCountryRepository)(nil).SelectByName), name)
}

// SelectAll mocks base method
func (m *MockCountryRepository) SelectAll() ([]*models.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll")
	ret0, _ := ret[0].([]*models.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll
func (mr *MockCountryRepositoryMockRecorder) SelectAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockCountryRepository)(nil).SelectAll))
}
