// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	errors "github.com/go-park-mail-ru/2020_2_Slash/internal/helpers/errors"
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserUsecase is a mock of UserUsecase interface
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserUsecase) Create(user *models.User) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserUsecaseMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserUsecase)(nil).Create), user)
}

// GetByEmail mocks base method
func (m *MockUserUsecase) GetByEmail(email string) (*models.User, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockUserUsecaseMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserUsecase)(nil).GetByEmail), email)
}

// GetByID mocks base method
func (m *MockUserUsecase) GetByID(userID uint64) (*models.User, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserUsecaseMockRecorder) GetByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserUsecase)(nil).GetByID), userID)
}

// UpdateProfile mocks base method
func (m *MockUserUsecase) UpdateProfile(userID uint64, newUserData *models.User) (*models.User, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", userID, newUserData)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockUserUsecaseMockRecorder) UpdateProfile(userID, newUserData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserUsecase)(nil).UpdateProfile), userID, newUserData)
}

// UpdateAvatar mocks base method
func (m *MockUserUsecase) UpdateAvatar(userID uint64, newAvatar string) (*models.User, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", userID, newAvatar)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockUserUsecaseMockRecorder) UpdateAvatar(userID, newAvatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserUsecase)(nil).UpdateAvatar), userID, newAvatar)
}

// CheckPassword mocks base method
func (m *MockUserUsecase) CheckPassword(user *models.User, password string) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", user, password)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword
func (mr *MockUserUsecaseMockRecorder) CheckPassword(user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockUserUsecase)(nil).CheckPassword), user, password)
}

// IsAdmin mocks base method
func (m *MockUserUsecase) IsAdmin(userID uint64) (bool, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockUserUsecaseMockRecorder) IsAdmin(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUserUsecase)(nil).IsAdmin), userID)
}
