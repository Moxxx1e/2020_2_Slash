// Code generated by MockGen. DO NOT EDIT.
// Source: user.pb.go

// Package mock_grpc is a generated GoMock package.
package mocks

import (
	context "context"
	grpc "github.com/go-park-mail-ru/2020_2_Slash/internal/user/delivery/grpc"
	gomock "github.com/golang/mock/gomock"
	grpc0 "google.golang.org/grpc"
	reflect "reflect"
)

// MockUserBlockClient is a mock of UserBlockClient interface
type MockUserBlockClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserBlockClientMockRecorder
}

// MockUserBlockClientMockRecorder is the mock recorder for MockUserBlockClient
type MockUserBlockClientMockRecorder struct {
	mock *MockUserBlockClient
}

// NewMockUserBlockClient creates a new mock instance
func NewMockUserBlockClient(ctrl *gomock.Controller) *MockUserBlockClient {
	mock := &MockUserBlockClient{ctrl: ctrl}
	mock.recorder = &MockUserBlockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserBlockClient) EXPECT() *MockUserBlockClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserBlockClient) Create(ctx context.Context, in *grpc.User, opts ...grpc0.CallOption) (*grpc.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserBlockClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserBlockClient)(nil).Create), varargs...)
}

// GetByEmail mocks base method
func (m *MockUserBlockClient) GetByEmail(ctx context.Context, in *grpc.Email, opts ...grpc0.CallOption) (*grpc.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByEmail", varargs...)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockUserBlockClientMockRecorder) GetByEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserBlockClient)(nil).GetByEmail), varargs...)
}

// GetByID mocks base method
func (m *MockUserBlockClient) GetByID(ctx context.Context, in *grpc.ID, opts ...grpc0.CallOption) (*grpc.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserBlockClientMockRecorder) GetByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserBlockClient)(nil).GetByID), varargs...)
}

// UpdateProfile mocks base method
func (m *MockUserBlockClient) UpdateProfile(ctx context.Context, in *grpc.User, opts ...grpc0.CallOption) (*grpc.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfile", varargs...)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockUserBlockClientMockRecorder) UpdateProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserBlockClient)(nil).UpdateProfile), varargs...)
}

// UpdateAvatar mocks base method
func (m *MockUserBlockClient) UpdateAvatar(ctx context.Context, in *grpc.IdAvatar, opts ...grpc0.CallOption) (*grpc.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAvatar", varargs...)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockUserBlockClientMockRecorder) UpdateAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserBlockClient)(nil).UpdateAvatar), varargs...)
}

// UpdatePassword mocks base method
func (m *MockUserBlockClient) UpdatePassword(ctx context.Context, in *grpc.UpdatePasswordMsg, opts ...grpc0.CallOption) (*grpc.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePassword", varargs...)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockUserBlockClientMockRecorder) UpdatePassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserBlockClient)(nil).UpdatePassword), varargs...)
}

// MockUserBlockServer is a mock of UserBlockServer interface
type MockUserBlockServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserBlockServerMockRecorder
}

// MockUserBlockServerMockRecorder is the mock recorder for MockUserBlockServer
type MockUserBlockServerMockRecorder struct {
	mock *MockUserBlockServer
}

// NewMockUserBlockServer creates a new mock instance
func NewMockUserBlockServer(ctrl *gomock.Controller) *MockUserBlockServer {
	mock := &MockUserBlockServer{ctrl: ctrl}
	mock.recorder = &MockUserBlockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserBlockServer) EXPECT() *MockUserBlockServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserBlockServer) Create(arg0 context.Context, arg1 *grpc.User) (*grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserBlockServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserBlockServer)(nil).Create), arg0, arg1)
}

// GetByEmail mocks base method
func (m *MockUserBlockServer) GetByEmail(arg0 context.Context, arg1 *grpc.Email) (*grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockUserBlockServerMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserBlockServer)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method
func (m *MockUserBlockServer) GetByID(arg0 context.Context, arg1 *grpc.ID) (*grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockUserBlockServerMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserBlockServer)(nil).GetByID), arg0, arg1)
}

// UpdateProfile mocks base method
func (m *MockUserBlockServer) UpdateProfile(arg0 context.Context, arg1 *grpc.User) (*grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockUserBlockServerMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserBlockServer)(nil).UpdateProfile), arg0, arg1)
}

// UpdateAvatar mocks base method
func (m *MockUserBlockServer) UpdateAvatar(arg0 context.Context, arg1 *grpc.IdAvatar) (*grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", arg0, arg1)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockUserBlockServerMockRecorder) UpdateAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserBlockServer)(nil).UpdateAvatar), arg0, arg1)
}

// UpdatePassword mocks base method
func (m *MockUserBlockServer) UpdatePassword(arg0 context.Context, arg1 *grpc.UpdatePasswordMsg) (*grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(*grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockUserBlockServerMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserBlockServer)(nil).UpdatePassword), arg0, arg1)
}
