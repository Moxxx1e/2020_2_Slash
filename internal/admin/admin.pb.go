// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: internal/admin/admin.proto

package admin

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{0}
}

func (x *Actor) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Actor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Director struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Director) Reset() {
	*x = Director{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Director) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Director) ProtoMessage() {}

func (x *Director) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Director.ProtoReflect.Descriptor instead.
func (*Director) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{1}
}

func (x *Director) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Director) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{2}
}

func (x *Country) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Genre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Genre) Reset() {
	*x = Genre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Genre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Genre) ProtoMessage() {}

func (x *Genre) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Genre.ProtoReflect.Descriptor instead.
func (*Genre) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{3}
}

func (x *Genre) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Genre) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	OriginalName     string      `protobuf:"bytes,3,opt,name=OriginalName,proto3" json:"OriginalName,omitempty"`
	Description      string      `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	ShortDescription string      `protobuf:"bytes,5,opt,name=ShortDescription,proto3" json:"ShortDescription,omitempty"`
	Rating           int64       `protobuf:"varint,6,opt,name=Rating,proto3" json:"Rating,omitempty"`
	Year             int64       `protobuf:"varint,7,opt,name=Year,proto3" json:"Year,omitempty"`
	Images           string      `protobuf:"bytes,8,opt,name=Images,proto3" json:"Images,omitempty"`
	Type             string      `protobuf:"bytes,9,opt,name=Type,proto3" json:"Type,omitempty"`
	Countries        []*Country  `protobuf:"bytes,10,rep,name=Countries,proto3" json:"Countries,omitempty"`
	Genres           []*Genre    `protobuf:"bytes,11,rep,name=Genres,proto3" json:"Genres,omitempty"`
	Actors           []*Actor    `protobuf:"bytes,12,rep,name=Actors,proto3" json:"Actors,omitempty"`
	Directors        []*Director `protobuf:"bytes,13,rep,name=Directors,proto3" json:"Directors,omitempty"`
	IsLiked          bool        `protobuf:"varint,14,opt,name=IsLiked,proto3" json:"IsLiked,omitempty"`
	IsFavourite      bool        `protobuf:"varint,15,opt,name=IsFavourite,proto3" json:"IsFavourite,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{4}
}

func (x *Content) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Content) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Content) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *Content) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Content) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *Content) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Content) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Content) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Content) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Content) GetCountries() []*Country {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *Content) GetGenres() []*Genre {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Content) GetActors() []*Actor {
	if x != nil {
		return x.Actors
	}
	return nil
}

func (x *Content) GetDirectors() []*Director {
	if x != nil {
		return x.Directors
	}
	return nil
}

func (x *Content) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

func (x *Content) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

type Episode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Number      int64  `protobuf:"varint,3,opt,name=Number,proto3" json:"Number,omitempty"`
	Video       string `protobuf:"bytes,4,opt,name=Video,proto3" json:"Video,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	Poster      string `protobuf:"bytes,6,opt,name=Poster,proto3" json:"Poster,omitempty"`
	SeasonID    uint64 `protobuf:"varint,7,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
}

func (x *Episode) Reset() {
	*x = Episode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Episode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Episode) ProtoMessage() {}

func (x *Episode) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Episode.ProtoReflect.Descriptor instead.
func (*Episode) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{5}
}

func (x *Episode) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Episode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Episode) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Episode) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *Episode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Episode) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *Episode) GetSeasonID() uint64 {
	if x != nil {
		return x.SeasonID
	}
	return 0
}

type Season struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint64     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Number         int64      `protobuf:"varint,2,opt,name=Number,proto3" json:"Number,omitempty"`
	EpisodesNumber int64      `protobuf:"varint,3,opt,name=EpisodesNumber,proto3" json:"EpisodesNumber,omitempty"`
	TVShowID       uint64     `protobuf:"varint,4,opt,name=TVShowID,proto3" json:"TVShowID,omitempty"`
	Episodes       []*Episode `protobuf:"bytes,5,rep,name=Episodes,proto3" json:"Episodes,omitempty"`
}

func (x *Season) Reset() {
	*x = Season{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Season) ProtoMessage() {}

func (x *Season) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Season.ProtoReflect.Descriptor instead.
func (*Season) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{6}
}

func (x *Season) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Season) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Season) GetEpisodesNumber() int64 {
	if x != nil {
		return x.EpisodesNumber
	}
	return 0
}

func (x *Season) GetTVShowID() uint64 {
	if x != nil {
		return x.TVShowID
	}
	return 0
}

func (x *Season) GetEpisodes() []*Episode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

type TVShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Seasons int64    `protobuf:"varint,2,opt,name=Seasons,proto3" json:"Seasons,omitempty"`
	Content *Content `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *TVShow) Reset() {
	*x = TVShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TVShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TVShow) ProtoMessage() {}

func (x *TVShow) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TVShow.ProtoReflect.Descriptor instead.
func (*TVShow) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{7}
}

func (x *TVShow) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TVShow) GetSeasons() int64 {
	if x != nil {
		return x.Seasons
	}
	return 0
}

func (x *TVShow) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

type Movie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Video   string   `protobuf:"bytes,2,opt,name=Video,proto3" json:"Video,omitempty"`
	Content *Content `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *Movie) Reset() {
	*x = Movie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Movie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movie) ProtoMessage() {}

func (x *Movie) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movie.ProtoReflect.Descriptor instead.
func (*Movie) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{8}
}

func (x *Movie) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Movie) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *Movie) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

type VideoMovie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Video string `protobuf:"bytes,1,opt,name=Video,proto3" json:"Video,omitempty"`
	Movie *Movie `protobuf:"bytes,2,opt,name=Movie,proto3" json:"Movie,omitempty"`
}

func (x *VideoMovie) Reset() {
	*x = VideoMovie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMovie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMovie) ProtoMessage() {}

func (x *VideoMovie) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMovie.ProtoReflect.Descriptor instead.
func (*VideoMovie) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{9}
}

func (x *VideoMovie) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *VideoMovie) GetMovie() *Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{10}
}

func (x *ID) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type ContentPostersDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    *Content `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	PostersDir string   `protobuf:"bytes,2,opt,name=PostersDir,proto3" json:"PostersDir,omitempty"`
}

func (x *ContentPostersDir) Reset() {
	*x = ContentPostersDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_admin_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentPostersDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentPostersDir) ProtoMessage() {}

func (x *ContentPostersDir) ProtoReflect() protoreflect.Message {
	mi := &file_internal_admin_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentPostersDir.ProtoReflect.Descriptor instead.
func (*ContentPostersDir) Descriptor() ([]byte, []int) {
	return file_internal_admin_admin_proto_rawDescGZIP(), []int{11}
}

func (x *ContentPostersDir) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ContentPostersDir) GetPostersDir() string {
	if x != nil {
		return x.PostersDir
	}
	return ""
}

var File_internal_admin_admin_proto protoreflect.FileDescriptor

var file_internal_admin_admin_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2b, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a,
	0x08, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a,
	0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x05,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52,
	0x06, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f,
	0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x46,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x07, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xa0, 0x01, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x56, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x54, 0x56, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x08, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x5c, 0x0a, 0x06, 0x54, 0x56, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a,
	0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x28, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x22, 0x0a, 0x05, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x22, 0x14,
	0x0a, 0x02, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x44, 0x69, 0x72, 0x32, 0xe7, 0x0a, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x0c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x1a,
	0x0c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x09, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x0f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x1a, 0x0f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x09, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x0e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x09, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65,
	0x6e, 0x72, 0x65, 0x12, 0x0c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x1a, 0x0c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x12, 0x0c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x09, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x2b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12,
	0x0c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x1a, 0x0c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x11, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x09, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x2e, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x56, 0x53, 0x68, 0x6f,
	0x77, 0x12, 0x0d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x56, 0x53, 0x68, 0x6f, 0x77,
	0x1a, 0x0d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x56, 0x53, 0x68, 0x6f, 0x77, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x56, 0x53, 0x68, 0x6f,
	0x77, 0x42, 0x79, 0x49, 0x44, 0x12, 0x09, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x44,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x44, 0x69, 0x72, 0x1a, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x1a, 0x0d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x09, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x1a, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x09, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_admin_admin_proto_rawDescOnce sync.Once
	file_internal_admin_admin_proto_rawDescData = file_internal_admin_admin_proto_rawDesc
)

func file_internal_admin_admin_proto_rawDescGZIP() []byte {
	file_internal_admin_admin_proto_rawDescOnce.Do(func() {
		file_internal_admin_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_admin_admin_proto_rawDescData)
	})
	return file_internal_admin_admin_proto_rawDescData
}

var file_internal_admin_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_internal_admin_admin_proto_goTypes = []interface{}{
	(*Actor)(nil),             // 0: admin.Actor
	(*Director)(nil),          // 1: admin.Director
	(*Country)(nil),           // 2: admin.Country
	(*Genre)(nil),             // 3: admin.Genre
	(*Content)(nil),           // 4: admin.Content
	(*Episode)(nil),           // 5: admin.Episode
	(*Season)(nil),            // 6: admin.Season
	(*TVShow)(nil),            // 7: admin.TVShow
	(*Movie)(nil),             // 8: admin.Movie
	(*VideoMovie)(nil),        // 9: admin.VideoMovie
	(*ID)(nil),                // 10: admin.ID
	(*ContentPostersDir)(nil), // 11: admin.ContentPostersDir
	(*empty.Empty)(nil),       // 12: google.protobuf.Empty
}
var file_internal_admin_admin_proto_depIdxs = []int32{
	2,  // 0: admin.Content.Countries:type_name -> admin.Country
	3,  // 1: admin.Content.Genres:type_name -> admin.Genre
	0,  // 2: admin.Content.Actors:type_name -> admin.Actor
	1,  // 3: admin.Content.Directors:type_name -> admin.Director
	5,  // 4: admin.Season.Episodes:type_name -> admin.Episode
	4,  // 5: admin.TVShow.Content:type_name -> admin.Content
	4,  // 6: admin.Movie.Content:type_name -> admin.Content
	8,  // 7: admin.VideoMovie.Movie:type_name -> admin.Movie
	4,  // 8: admin.ContentPostersDir.Content:type_name -> admin.Content
	0,  // 9: admin.AdminPanel.CreateActor:input_type -> admin.Actor
	0,  // 10: admin.AdminPanel.ChangeActor:input_type -> admin.Actor
	10, // 11: admin.AdminPanel.DeleteActorByID:input_type -> admin.ID
	1,  // 12: admin.AdminPanel.CreateDirector:input_type -> admin.Director
	1,  // 13: admin.AdminPanel.ChangeDirector:input_type -> admin.Director
	10, // 14: admin.AdminPanel.DeleteDirectorByID:input_type -> admin.ID
	2,  // 15: admin.AdminPanel.CreateCountry:input_type -> admin.Country
	2,  // 16: admin.AdminPanel.ChangeCountry:input_type -> admin.Country
	10, // 17: admin.AdminPanel.DeleteCountryByID:input_type -> admin.ID
	3,  // 18: admin.AdminPanel.CreateGenre:input_type -> admin.Genre
	3,  // 19: admin.AdminPanel.ChangeGenre:input_type -> admin.Genre
	10, // 20: admin.AdminPanel.DeleteGenreByID:input_type -> admin.ID
	8,  // 21: admin.AdminPanel.CreateMovie:input_type -> admin.Movie
	9,  // 22: admin.AdminPanel.ChangeVideo:input_type -> admin.VideoMovie
	10, // 23: admin.AdminPanel.DeleteMovieByID:input_type -> admin.ID
	7,  // 24: admin.AdminPanel.CreateTVShow:input_type -> admin.TVShow
	10, // 25: admin.AdminPanel.DeleteTVShowByID:input_type -> admin.ID
	11, // 26: admin.AdminPanel.ChangePosters:input_type -> admin.ContentPostersDir
	4,  // 27: admin.AdminPanel.ChangeContent:input_type -> admin.Content
	6,  // 28: admin.AdminPanel.CreateSeason:input_type -> admin.Season
	6,  // 29: admin.AdminPanel.ChangeSeason:input_type -> admin.Season
	10, // 30: admin.AdminPanel.DeleteSeasonsByID:input_type -> admin.ID
	5,  // 31: admin.AdminPanel.CreateEpisode:input_type -> admin.Episode
	5,  // 32: admin.AdminPanel.ChangeEpisode:input_type -> admin.Episode
	10, // 33: admin.AdminPanel.DeleteEpisodeByID:input_type -> admin.ID
	0,  // 34: admin.AdminPanel.CreateActor:output_type -> admin.Actor
	12, // 35: admin.AdminPanel.ChangeActor:output_type -> google.protobuf.Empty
	12, // 36: admin.AdminPanel.DeleteActorByID:output_type -> google.protobuf.Empty
	1,  // 37: admin.AdminPanel.CreateDirector:output_type -> admin.Director
	12, // 38: admin.AdminPanel.ChangeDirector:output_type -> google.protobuf.Empty
	12, // 39: admin.AdminPanel.DeleteDirectorByID:output_type -> google.protobuf.Empty
	2,  // 40: admin.AdminPanel.CreateCountry:output_type -> admin.Country
	12, // 41: admin.AdminPanel.ChangeCountry:output_type -> google.protobuf.Empty
	12, // 42: admin.AdminPanel.DeleteCountryByID:output_type -> google.protobuf.Empty
	3,  // 43: admin.AdminPanel.CreateGenre:output_type -> admin.Genre
	12, // 44: admin.AdminPanel.ChangeGenre:output_type -> google.protobuf.Empty
	12, // 45: admin.AdminPanel.DeleteGenreByID:output_type -> google.protobuf.Empty
	8,  // 46: admin.AdminPanel.CreateMovie:output_type -> admin.Movie
	12, // 47: admin.AdminPanel.ChangeVideo:output_type -> google.protobuf.Empty
	12, // 48: admin.AdminPanel.DeleteMovieByID:output_type -> google.protobuf.Empty
	7,  // 49: admin.AdminPanel.CreateTVShow:output_type -> admin.TVShow
	12, // 50: admin.AdminPanel.DeleteTVShowByID:output_type -> google.protobuf.Empty
	4,  // 51: admin.AdminPanel.ChangePosters:output_type -> admin.Content
	12, // 52: admin.AdminPanel.ChangeContent:output_type -> google.protobuf.Empty
	6,  // 53: admin.AdminPanel.CreateSeason:output_type -> admin.Season
	12, // 54: admin.AdminPanel.ChangeSeason:output_type -> google.protobuf.Empty
	12, // 55: admin.AdminPanel.DeleteSeasonsByID:output_type -> google.protobuf.Empty
	5,  // 56: admin.AdminPanel.CreateEpisode:output_type -> admin.Episode
	12, // 57: admin.AdminPanel.ChangeEpisode:output_type -> google.protobuf.Empty
	12, // 58: admin.AdminPanel.DeleteEpisodeByID:output_type -> google.protobuf.Empty
	34, // [34:59] is the sub-list for method output_type
	9,  // [9:34] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_internal_admin_admin_proto_init() }
func file_internal_admin_admin_proto_init() {
	if File_internal_admin_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_admin_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Director); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Genre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Episode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Season); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TVShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Movie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMovie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_admin_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentPostersDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_admin_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_admin_admin_proto_goTypes,
		DependencyIndexes: file_internal_admin_admin_proto_depIdxs,
		MessageInfos:      file_internal_admin_admin_proto_msgTypes,
	}.Build()
	File_internal_admin_admin_proto = out.File
	file_internal_admin_admin_proto_rawDesc = nil
	file_internal_admin_admin_proto_goTypes = nil
	file_internal_admin_admin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdminPanelClient is the client API for AdminPanel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminPanelClient interface {
	// actors
	CreateActor(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*Actor, error)
	ChangeActor(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteActorByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	// directors
	CreateDirector(ctx context.Context, in *Director, opts ...grpc.CallOption) (*Director, error)
	ChangeDirector(ctx context.Context, in *Director, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteDirectorByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	// countries
	CreateCountry(ctx context.Context, in *Country, opts ...grpc.CallOption) (*Country, error)
	ChangeCountry(ctx context.Context, in *Country, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteCountryByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	// genres
	CreateGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*Genre, error)
	ChangeGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteGenreByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	// movies
	CreateMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movie, error)
	ChangeVideo(ctx context.Context, in *VideoMovie, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteMovieByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	// tvshows
	CreateTVShow(ctx context.Context, in *TVShow, opts ...grpc.CallOption) (*TVShow, error)
	DeleteTVShowByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	// content
	ChangePosters(ctx context.Context, in *ContentPostersDir, opts ...grpc.CallOption) (*Content, error)
	ChangeContent(ctx context.Context, in *Content, opts ...grpc.CallOption) (*empty.Empty, error)
	// seasons
	CreateSeason(ctx context.Context, in *Season, opts ...grpc.CallOption) (*Season, error)
	ChangeSeason(ctx context.Context, in *Season, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteSeasonsByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
	// episodes
	CreateEpisode(ctx context.Context, in *Episode, opts ...grpc.CallOption) (*Episode, error)
	ChangeEpisode(ctx context.Context, in *Episode, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteEpisodeByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
}

type adminPanelClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminPanelClient(cc grpc.ClientConnInterface) AdminPanelClient {
	return &adminPanelClient{cc}
}

func (c *adminPanelClient) CreateActor(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*Actor, error) {
	out := new(Actor)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/CreateActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ChangeActor(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/ChangeActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) DeleteActorByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/DeleteActorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateDirector(ctx context.Context, in *Director, opts ...grpc.CallOption) (*Director, error) {
	out := new(Director)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/CreateDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ChangeDirector(ctx context.Context, in *Director, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/ChangeDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) DeleteDirectorByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/DeleteDirectorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateCountry(ctx context.Context, in *Country, opts ...grpc.CallOption) (*Country, error) {
	out := new(Country)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/CreateCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ChangeCountry(ctx context.Context, in *Country, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/ChangeCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) DeleteCountryByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/DeleteCountryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*Genre, error) {
	out := new(Genre)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/CreateGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ChangeGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/ChangeGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) DeleteGenreByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/DeleteGenreByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/CreateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ChangeVideo(ctx context.Context, in *VideoMovie, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/ChangeVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) DeleteMovieByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/DeleteMovieByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateTVShow(ctx context.Context, in *TVShow, opts ...grpc.CallOption) (*TVShow, error) {
	out := new(TVShow)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/CreateTVShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) DeleteTVShowByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/DeleteTVShowByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ChangePosters(ctx context.Context, in *ContentPostersDir, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/ChangePosters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ChangeContent(ctx context.Context, in *Content, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/ChangeContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateSeason(ctx context.Context, in *Season, opts ...grpc.CallOption) (*Season, error) {
	out := new(Season)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/CreateSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ChangeSeason(ctx context.Context, in *Season, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/ChangeSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) DeleteSeasonsByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/DeleteSeasonsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) CreateEpisode(ctx context.Context, in *Episode, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/CreateEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) ChangeEpisode(ctx context.Context, in *Episode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/ChangeEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelClient) DeleteEpisodeByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminPanel/DeleteEpisodeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminPanelServer is the server API for AdminPanel service.
type AdminPanelServer interface {
	// actors
	CreateActor(context.Context, *Actor) (*Actor, error)
	ChangeActor(context.Context, *Actor) (*empty.Empty, error)
	DeleteActorByID(context.Context, *ID) (*empty.Empty, error)
	// directors
	CreateDirector(context.Context, *Director) (*Director, error)
	ChangeDirector(context.Context, *Director) (*empty.Empty, error)
	DeleteDirectorByID(context.Context, *ID) (*empty.Empty, error)
	// countries
	CreateCountry(context.Context, *Country) (*Country, error)
	ChangeCountry(context.Context, *Country) (*empty.Empty, error)
	DeleteCountryByID(context.Context, *ID) (*empty.Empty, error)
	// genres
	CreateGenre(context.Context, *Genre) (*Genre, error)
	ChangeGenre(context.Context, *Genre) (*empty.Empty, error)
	DeleteGenreByID(context.Context, *ID) (*empty.Empty, error)
	// movies
	CreateMovie(context.Context, *Movie) (*Movie, error)
	ChangeVideo(context.Context, *VideoMovie) (*empty.Empty, error)
	DeleteMovieByID(context.Context, *ID) (*empty.Empty, error)
	// tvshows
	CreateTVShow(context.Context, *TVShow) (*TVShow, error)
	DeleteTVShowByID(context.Context, *ID) (*empty.Empty, error)
	// content
	ChangePosters(context.Context, *ContentPostersDir) (*Content, error)
	ChangeContent(context.Context, *Content) (*empty.Empty, error)
	// seasons
	CreateSeason(context.Context, *Season) (*Season, error)
	ChangeSeason(context.Context, *Season) (*empty.Empty, error)
	DeleteSeasonsByID(context.Context, *ID) (*empty.Empty, error)
	// episodes
	CreateEpisode(context.Context, *Episode) (*Episode, error)
	ChangeEpisode(context.Context, *Episode) (*empty.Empty, error)
	DeleteEpisodeByID(context.Context, *ID) (*empty.Empty, error)
}

// UnimplementedAdminPanelServer can be embedded to have forward compatible implementations.
type UnimplementedAdminPanelServer struct {
}

func (*UnimplementedAdminPanelServer) CreateActor(context.Context, *Actor) (*Actor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActor not implemented")
}
func (*UnimplementedAdminPanelServer) ChangeActor(context.Context, *Actor) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeActor not implemented")
}
func (*UnimplementedAdminPanelServer) DeleteActorByID(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActorByID not implemented")
}
func (*UnimplementedAdminPanelServer) CreateDirector(context.Context, *Director) (*Director, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirector not implemented")
}
func (*UnimplementedAdminPanelServer) ChangeDirector(context.Context, *Director) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDirector not implemented")
}
func (*UnimplementedAdminPanelServer) DeleteDirectorByID(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDirectorByID not implemented")
}
func (*UnimplementedAdminPanelServer) CreateCountry(context.Context, *Country) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountry not implemented")
}
func (*UnimplementedAdminPanelServer) ChangeCountry(context.Context, *Country) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCountry not implemented")
}
func (*UnimplementedAdminPanelServer) DeleteCountryByID(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCountryByID not implemented")
}
func (*UnimplementedAdminPanelServer) CreateGenre(context.Context, *Genre) (*Genre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenre not implemented")
}
func (*UnimplementedAdminPanelServer) ChangeGenre(context.Context, *Genre) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGenre not implemented")
}
func (*UnimplementedAdminPanelServer) DeleteGenreByID(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenreByID not implemented")
}
func (*UnimplementedAdminPanelServer) CreateMovie(context.Context, *Movie) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (*UnimplementedAdminPanelServer) ChangeVideo(context.Context, *VideoMovie) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeVideo not implemented")
}
func (*UnimplementedAdminPanelServer) DeleteMovieByID(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovieByID not implemented")
}
func (*UnimplementedAdminPanelServer) CreateTVShow(context.Context, *TVShow) (*TVShow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTVShow not implemented")
}
func (*UnimplementedAdminPanelServer) DeleteTVShowByID(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTVShowByID not implemented")
}
func (*UnimplementedAdminPanelServer) ChangePosters(context.Context, *ContentPostersDir) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePosters not implemented")
}
func (*UnimplementedAdminPanelServer) ChangeContent(context.Context, *Content) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeContent not implemented")
}
func (*UnimplementedAdminPanelServer) CreateSeason(context.Context, *Season) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeason not implemented")
}
func (*UnimplementedAdminPanelServer) ChangeSeason(context.Context, *Season) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSeason not implemented")
}
func (*UnimplementedAdminPanelServer) DeleteSeasonsByID(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeasonsByID not implemented")
}
func (*UnimplementedAdminPanelServer) CreateEpisode(context.Context, *Episode) (*Episode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEpisode not implemented")
}
func (*UnimplementedAdminPanelServer) ChangeEpisode(context.Context, *Episode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEpisode not implemented")
}
func (*UnimplementedAdminPanelServer) DeleteEpisodeByID(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEpisodeByID not implemented")
}

func RegisterAdminPanelServer(s *grpc.Server, srv AdminPanelServer) {
	s.RegisterService(&_AdminPanel_serviceDesc, srv)
}

func _AdminPanel_CreateActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/CreateActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateActor(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ChangeActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ChangeActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/ChangeActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ChangeActor(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_DeleteActorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).DeleteActorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/DeleteActorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).DeleteActorByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Director)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/CreateDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateDirector(ctx, req.(*Director))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ChangeDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Director)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ChangeDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/ChangeDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ChangeDirector(ctx, req.(*Director))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_DeleteDirectorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).DeleteDirectorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/DeleteDirectorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).DeleteDirectorByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Country)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/CreateCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateCountry(ctx, req.(*Country))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ChangeCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Country)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ChangeCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/ChangeCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ChangeCountry(ctx, req.(*Country))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_DeleteCountryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).DeleteCountryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/DeleteCountryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).DeleteCountryByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Genre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/CreateGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateGenre(ctx, req.(*Genre))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ChangeGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Genre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ChangeGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/ChangeGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ChangeGenre(ctx, req.(*Genre))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_DeleteGenreByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).DeleteGenreByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/DeleteGenreByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).DeleteGenreByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Movie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/CreateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateMovie(ctx, req.(*Movie))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ChangeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoMovie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ChangeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/ChangeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ChangeVideo(ctx, req.(*VideoMovie))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_DeleteMovieByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).DeleteMovieByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/DeleteMovieByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).DeleteMovieByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateTVShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TVShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateTVShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/CreateTVShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateTVShow(ctx, req.(*TVShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_DeleteTVShowByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).DeleteTVShowByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/DeleteTVShowByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).DeleteTVShowByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ChangePosters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentPostersDir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ChangePosters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/ChangePosters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ChangePosters(ctx, req.(*ContentPostersDir))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ChangeContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ChangeContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/ChangeContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ChangeContent(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Season)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/CreateSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateSeason(ctx, req.(*Season))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ChangeSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Season)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ChangeSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/ChangeSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ChangeSeason(ctx, req.(*Season))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_DeleteSeasonsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).DeleteSeasonsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/DeleteSeasonsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).DeleteSeasonsByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_CreateEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Episode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).CreateEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/CreateEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).CreateEpisode(ctx, req.(*Episode))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_ChangeEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Episode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).ChangeEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/ChangeEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).ChangeEpisode(ctx, req.(*Episode))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanel_DeleteEpisodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServer).DeleteEpisodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminPanel/DeleteEpisodeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServer).DeleteEpisodeByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminPanel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminPanel",
	HandlerType: (*AdminPanelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateActor",
			Handler:    _AdminPanel_CreateActor_Handler,
		},
		{
			MethodName: "ChangeActor",
			Handler:    _AdminPanel_ChangeActor_Handler,
		},
		{
			MethodName: "DeleteActorByID",
			Handler:    _AdminPanel_DeleteActorByID_Handler,
		},
		{
			MethodName: "CreateDirector",
			Handler:    _AdminPanel_CreateDirector_Handler,
		},
		{
			MethodName: "ChangeDirector",
			Handler:    _AdminPanel_ChangeDirector_Handler,
		},
		{
			MethodName: "DeleteDirectorByID",
			Handler:    _AdminPanel_DeleteDirectorByID_Handler,
		},
		{
			MethodName: "CreateCountry",
			Handler:    _AdminPanel_CreateCountry_Handler,
		},
		{
			MethodName: "ChangeCountry",
			Handler:    _AdminPanel_ChangeCountry_Handler,
		},
		{
			MethodName: "DeleteCountryByID",
			Handler:    _AdminPanel_DeleteCountryByID_Handler,
		},
		{
			MethodName: "CreateGenre",
			Handler:    _AdminPanel_CreateGenre_Handler,
		},
		{
			MethodName: "ChangeGenre",
			Handler:    _AdminPanel_ChangeGenre_Handler,
		},
		{
			MethodName: "DeleteGenreByID",
			Handler:    _AdminPanel_DeleteGenreByID_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _AdminPanel_CreateMovie_Handler,
		},
		{
			MethodName: "ChangeVideo",
			Handler:    _AdminPanel_ChangeVideo_Handler,
		},
		{
			MethodName: "DeleteMovieByID",
			Handler:    _AdminPanel_DeleteMovieByID_Handler,
		},
		{
			MethodName: "CreateTVShow",
			Handler:    _AdminPanel_CreateTVShow_Handler,
		},
		{
			MethodName: "DeleteTVShowByID",
			Handler:    _AdminPanel_DeleteTVShowByID_Handler,
		},
		{
			MethodName: "ChangePosters",
			Handler:    _AdminPanel_ChangePosters_Handler,
		},
		{
			MethodName: "ChangeContent",
			Handler:    _AdminPanel_ChangeContent_Handler,
		},
		{
			MethodName: "CreateSeason",
			Handler:    _AdminPanel_CreateSeason_Handler,
		},
		{
			MethodName: "ChangeSeason",
			Handler:    _AdminPanel_ChangeSeason_Handler,
		},
		{
			MethodName: "DeleteSeasonsByID",
			Handler:    _AdminPanel_DeleteSeasonsByID_Handler,
		},
		{
			MethodName: "CreateEpisode",
			Handler:    _AdminPanel_CreateEpisode_Handler,
		},
		{
			MethodName: "ChangeEpisode",
			Handler:    _AdminPanel_ChangeEpisode_Handler,
		},
		{
			MethodName: "DeleteEpisodeByID",
			Handler:    _AdminPanel_DeleteEpisodeByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/admin/admin.proto",
}
