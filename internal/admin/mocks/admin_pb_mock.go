// Code generated by MockGen. DO NOT EDIT.
// Source: admin.pb.go

// Package mock_admin is a generated GoMock package.
package mocks

import (
	context "context"
	admin "github.com/go-park-mail-ru/2020_2_Slash/internal/admin"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAdminPanelClient is a mock of AdminPanelClient interface
type MockAdminPanelClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminPanelClientMockRecorder
}

// MockAdminPanelClientMockRecorder is the mock recorder for MockAdminPanelClient
type MockAdminPanelClientMockRecorder struct {
	mock *MockAdminPanelClient
}

// NewMockAdminPanelClient creates a new mock instance
func NewMockAdminPanelClient(ctrl *gomock.Controller) *MockAdminPanelClient {
	mock := &MockAdminPanelClient{ctrl: ctrl}
	mock.recorder = &MockAdminPanelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdminPanelClient) EXPECT() *MockAdminPanelClientMockRecorder {
	return m.recorder
}

// CreateActor mocks base method
func (m *MockAdminPanelClient) CreateActor(ctx context.Context, in *admin.Actor, opts ...grpc.CallOption) (*admin.Actor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateActor", varargs...)
	ret0, _ := ret[0].(*admin.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor
func (mr *MockAdminPanelClientMockRecorder) CreateActor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockAdminPanelClient)(nil).CreateActor), varargs...)
}

// ChangeActor mocks base method
func (m *MockAdminPanelClient) ChangeActor(ctx context.Context, in *admin.Actor, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeActor", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeActor indicates an expected call of ChangeActor
func (mr *MockAdminPanelClientMockRecorder) ChangeActor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeActor", reflect.TypeOf((*MockAdminPanelClient)(nil).ChangeActor), varargs...)
}

// DeleteActorByID mocks base method
func (m *MockAdminPanelClient) DeleteActorByID(ctx context.Context, in *admin.ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteActorByID", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActorByID indicates an expected call of DeleteActorByID
func (mr *MockAdminPanelClientMockRecorder) DeleteActorByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorByID", reflect.TypeOf((*MockAdminPanelClient)(nil).DeleteActorByID), varargs...)
}

// CreateDirector mocks base method
func (m *MockAdminPanelClient) CreateDirector(ctx context.Context, in *admin.Director, opts ...grpc.CallOption) (*admin.Director, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDirector", varargs...)
	ret0, _ := ret[0].(*admin.Director)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirector indicates an expected call of CreateDirector
func (mr *MockAdminPanelClientMockRecorder) CreateDirector(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirector", reflect.TypeOf((*MockAdminPanelClient)(nil).CreateDirector), varargs...)
}

// ChangeDirector mocks base method
func (m *MockAdminPanelClient) ChangeDirector(ctx context.Context, in *admin.Director, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeDirector", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeDirector indicates an expected call of ChangeDirector
func (mr *MockAdminPanelClientMockRecorder) ChangeDirector(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDirector", reflect.TypeOf((*MockAdminPanelClient)(nil).ChangeDirector), varargs...)
}

// DeleteDirectorByID mocks base method
func (m *MockAdminPanelClient) DeleteDirectorByID(ctx context.Context, in *admin.ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDirectorByID", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectorByID indicates an expected call of DeleteDirectorByID
func (mr *MockAdminPanelClientMockRecorder) DeleteDirectorByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectorByID", reflect.TypeOf((*MockAdminPanelClient)(nil).DeleteDirectorByID), varargs...)
}

// CreateCountry mocks base method
func (m *MockAdminPanelClient) CreateCountry(ctx context.Context, in *admin.Country, opts ...grpc.CallOption) (*admin.Country, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCountry", varargs...)
	ret0, _ := ret[0].(*admin.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry
func (mr *MockAdminPanelClientMockRecorder) CreateCountry(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockAdminPanelClient)(nil).CreateCountry), varargs...)
}

// ChangeCountry mocks base method
func (m *MockAdminPanelClient) ChangeCountry(ctx context.Context, in *admin.Country, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeCountry", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeCountry indicates an expected call of ChangeCountry
func (mr *MockAdminPanelClientMockRecorder) ChangeCountry(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCountry", reflect.TypeOf((*MockAdminPanelClient)(nil).ChangeCountry), varargs...)
}

// DeleteCountryByID mocks base method
func (m *MockAdminPanelClient) DeleteCountryByID(ctx context.Context, in *admin.ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCountryByID", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCountryByID indicates an expected call of DeleteCountryByID
func (mr *MockAdminPanelClientMockRecorder) DeleteCountryByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCountryByID", reflect.TypeOf((*MockAdminPanelClient)(nil).DeleteCountryByID), varargs...)
}

// CreateGenre mocks base method
func (m *MockAdminPanelClient) CreateGenre(ctx context.Context, in *admin.Genre, opts ...grpc.CallOption) (*admin.Genre, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGenre", varargs...)
	ret0, _ := ret[0].(*admin.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenre indicates an expected call of CreateGenre
func (mr *MockAdminPanelClientMockRecorder) CreateGenre(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockAdminPanelClient)(nil).CreateGenre), varargs...)
}

// ChangeGenre mocks base method
func (m *MockAdminPanelClient) ChangeGenre(ctx context.Context, in *admin.Genre, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeGenre", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeGenre indicates an expected call of ChangeGenre
func (mr *MockAdminPanelClientMockRecorder) ChangeGenre(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeGenre", reflect.TypeOf((*MockAdminPanelClient)(nil).ChangeGenre), varargs...)
}

// DeleteGenreByID mocks base method
func (m *MockAdminPanelClient) DeleteGenreByID(ctx context.Context, in *admin.ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGenreByID", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGenreByID indicates an expected call of DeleteGenreByID
func (mr *MockAdminPanelClientMockRecorder) DeleteGenreByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenreByID", reflect.TypeOf((*MockAdminPanelClient)(nil).DeleteGenreByID), varargs...)
}

// CreateMovie mocks base method
func (m *MockAdminPanelClient) CreateMovie(ctx context.Context, in *admin.Movie, opts ...grpc.CallOption) (*admin.Movie, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMovie", varargs...)
	ret0, _ := ret[0].(*admin.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie
func (mr *MockAdminPanelClientMockRecorder) CreateMovie(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockAdminPanelClient)(nil).CreateMovie), varargs...)
}

// ChangeVideo mocks base method
func (m *MockAdminPanelClient) ChangeVideo(ctx context.Context, in *admin.VideoMovie, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeVideo", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeVideo indicates an expected call of ChangeVideo
func (mr *MockAdminPanelClientMockRecorder) ChangeVideo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeVideo", reflect.TypeOf((*MockAdminPanelClient)(nil).ChangeVideo), varargs...)
}

// DeleteMovieByID mocks base method
func (m *MockAdminPanelClient) DeleteMovieByID(ctx context.Context, in *admin.ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMovieByID", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovieByID indicates an expected call of DeleteMovieByID
func (mr *MockAdminPanelClientMockRecorder) DeleteMovieByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieByID", reflect.TypeOf((*MockAdminPanelClient)(nil).DeleteMovieByID), varargs...)
}

// CreateTVShow mocks base method
func (m *MockAdminPanelClient) CreateTVShow(ctx context.Context, in *admin.TVShow, opts ...grpc.CallOption) (*admin.TVShow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTVShow", varargs...)
	ret0, _ := ret[0].(*admin.TVShow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTVShow indicates an expected call of CreateTVShow
func (mr *MockAdminPanelClientMockRecorder) CreateTVShow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTVShow", reflect.TypeOf((*MockAdminPanelClient)(nil).CreateTVShow), varargs...)
}

// ChangePosters mocks base method
func (m *MockAdminPanelClient) ChangePosters(ctx context.Context, in *admin.ContentPostersDir, opts ...grpc.CallOption) (*admin.Content, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePosters", varargs...)
	ret0, _ := ret[0].(*admin.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePosters indicates an expected call of ChangePosters
func (mr *MockAdminPanelClientMockRecorder) ChangePosters(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePosters", reflect.TypeOf((*MockAdminPanelClient)(nil).ChangePosters), varargs...)
}

// ChangeContent mocks base method
func (m *MockAdminPanelClient) ChangeContent(ctx context.Context, in *admin.Content, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeContent", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeContent indicates an expected call of ChangeContent
func (mr *MockAdminPanelClientMockRecorder) ChangeContent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeContent", reflect.TypeOf((*MockAdminPanelClient)(nil).ChangeContent), varargs...)
}

// DeleteContentByID mocks base method
func (m *MockAdminPanelClient) DeleteContentByID(ctx context.Context, in *admin.ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteContentByID", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContentByID indicates an expected call of DeleteContentByID
func (mr *MockAdminPanelClientMockRecorder) DeleteContentByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentByID", reflect.TypeOf((*MockAdminPanelClient)(nil).DeleteContentByID), varargs...)
}

// CreateSeason mocks base method
func (m *MockAdminPanelClient) CreateSeason(ctx context.Context, in *admin.Season, opts ...grpc.CallOption) (*admin.Season, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSeason", varargs...)
	ret0, _ := ret[0].(*admin.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSeason indicates an expected call of CreateSeason
func (mr *MockAdminPanelClientMockRecorder) CreateSeason(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeason", reflect.TypeOf((*MockAdminPanelClient)(nil).CreateSeason), varargs...)
}

// ChangeSeason mocks base method
func (m *MockAdminPanelClient) ChangeSeason(ctx context.Context, in *admin.Season, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeSeason", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSeason indicates an expected call of ChangeSeason
func (mr *MockAdminPanelClientMockRecorder) ChangeSeason(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSeason", reflect.TypeOf((*MockAdminPanelClient)(nil).ChangeSeason), varargs...)
}

// DeleteSeasonsByID mocks base method
func (m *MockAdminPanelClient) DeleteSeasonsByID(ctx context.Context, in *admin.ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSeasonsByID", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSeasonsByID indicates an expected call of DeleteSeasonsByID
func (mr *MockAdminPanelClientMockRecorder) DeleteSeasonsByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeasonsByID", reflect.TypeOf((*MockAdminPanelClient)(nil).DeleteSeasonsByID), varargs...)
}

// CreateEpisode mocks base method
func (m *MockAdminPanelClient) CreateEpisode(ctx context.Context, in *admin.Episode, opts ...grpc.CallOption) (*admin.Episode, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEpisode", varargs...)
	ret0, _ := ret[0].(*admin.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEpisode indicates an expected call of CreateEpisode
func (mr *MockAdminPanelClientMockRecorder) CreateEpisode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpisode", reflect.TypeOf((*MockAdminPanelClient)(nil).CreateEpisode), varargs...)
}

// ChangeEpisode mocks base method
func (m *MockAdminPanelClient) ChangeEpisode(ctx context.Context, in *admin.Episode, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeEpisode", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeEpisode indicates an expected call of ChangeEpisode
func (mr *MockAdminPanelClientMockRecorder) ChangeEpisode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEpisode", reflect.TypeOf((*MockAdminPanelClient)(nil).ChangeEpisode), varargs...)
}

// UpdatePoster mocks base method
func (m *MockAdminPanelClient) UpdatePoster(ctx context.Context, in *admin.EpisodePostersDir, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePoster", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePoster indicates an expected call of UpdatePoster
func (mr *MockAdminPanelClientMockRecorder) UpdatePoster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoster", reflect.TypeOf((*MockAdminPanelClient)(nil).UpdatePoster), varargs...)
}

// UpdateVideo mocks base method
func (m *MockAdminPanelClient) UpdateVideo(ctx context.Context, in *admin.EpisodeVideo, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVideo", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVideo indicates an expected call of UpdateVideo
func (mr *MockAdminPanelClientMockRecorder) UpdateVideo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockAdminPanelClient)(nil).UpdateVideo), varargs...)
}

// DeleteEpisodeByID mocks base method
func (m *MockAdminPanelClient) DeleteEpisodeByID(ctx context.Context, in *admin.ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEpisodeByID", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEpisodeByID indicates an expected call of DeleteEpisodeByID
func (mr *MockAdminPanelClientMockRecorder) DeleteEpisodeByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpisodeByID", reflect.TypeOf((*MockAdminPanelClient)(nil).DeleteEpisodeByID), varargs...)
}

// MockAdminPanelServer is a mock of AdminPanelServer interface
type MockAdminPanelServer struct {
	ctrl     *gomock.Controller
	recorder *MockAdminPanelServerMockRecorder
}

// MockAdminPanelServerMockRecorder is the mock recorder for MockAdminPanelServer
type MockAdminPanelServerMockRecorder struct {
	mock *MockAdminPanelServer
}

// NewMockAdminPanelServer creates a new mock instance
func NewMockAdminPanelServer(ctrl *gomock.Controller) *MockAdminPanelServer {
	mock := &MockAdminPanelServer{ctrl: ctrl}
	mock.recorder = &MockAdminPanelServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdminPanelServer) EXPECT() *MockAdminPanelServerMockRecorder {
	return m.recorder
}

// CreateActor mocks base method
func (m *MockAdminPanelServer) CreateActor(arg0 context.Context, arg1 *admin.Actor) (*admin.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", arg0, arg1)
	ret0, _ := ret[0].(*admin.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor
func (mr *MockAdminPanelServerMockRecorder) CreateActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockAdminPanelServer)(nil).CreateActor), arg0, arg1)
}

// ChangeActor mocks base method
func (m *MockAdminPanelServer) ChangeActor(arg0 context.Context, arg1 *admin.Actor) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeActor", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeActor indicates an expected call of ChangeActor
func (mr *MockAdminPanelServerMockRecorder) ChangeActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeActor", reflect.TypeOf((*MockAdminPanelServer)(nil).ChangeActor), arg0, arg1)
}

// DeleteActorByID mocks base method
func (m *MockAdminPanelServer) DeleteActorByID(arg0 context.Context, arg1 *admin.ID) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorByID", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActorByID indicates an expected call of DeleteActorByID
func (mr *MockAdminPanelServerMockRecorder) DeleteActorByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorByID", reflect.TypeOf((*MockAdminPanelServer)(nil).DeleteActorByID), arg0, arg1)
}

// CreateDirector mocks base method
func (m *MockAdminPanelServer) CreateDirector(arg0 context.Context, arg1 *admin.Director) (*admin.Director, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirector", arg0, arg1)
	ret0, _ := ret[0].(*admin.Director)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirector indicates an expected call of CreateDirector
func (mr *MockAdminPanelServerMockRecorder) CreateDirector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirector", reflect.TypeOf((*MockAdminPanelServer)(nil).CreateDirector), arg0, arg1)
}

// ChangeDirector mocks base method
func (m *MockAdminPanelServer) ChangeDirector(arg0 context.Context, arg1 *admin.Director) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDirector", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeDirector indicates an expected call of ChangeDirector
func (mr *MockAdminPanelServerMockRecorder) ChangeDirector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDirector", reflect.TypeOf((*MockAdminPanelServer)(nil).ChangeDirector), arg0, arg1)
}

// DeleteDirectorByID mocks base method
func (m *MockAdminPanelServer) DeleteDirectorByID(arg0 context.Context, arg1 *admin.ID) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectorByID", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectorByID indicates an expected call of DeleteDirectorByID
func (mr *MockAdminPanelServerMockRecorder) DeleteDirectorByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectorByID", reflect.TypeOf((*MockAdminPanelServer)(nil).DeleteDirectorByID), arg0, arg1)
}

// CreateCountry mocks base method
func (m *MockAdminPanelServer) CreateCountry(arg0 context.Context, arg1 *admin.Country) (*admin.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", arg0, arg1)
	ret0, _ := ret[0].(*admin.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry
func (mr *MockAdminPanelServerMockRecorder) CreateCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockAdminPanelServer)(nil).CreateCountry), arg0, arg1)
}

// ChangeCountry mocks base method
func (m *MockAdminPanelServer) ChangeCountry(arg0 context.Context, arg1 *admin.Country) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCountry", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeCountry indicates an expected call of ChangeCountry
func (mr *MockAdminPanelServerMockRecorder) ChangeCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCountry", reflect.TypeOf((*MockAdminPanelServer)(nil).ChangeCountry), arg0, arg1)
}

// DeleteCountryByID mocks base method
func (m *MockAdminPanelServer) DeleteCountryByID(arg0 context.Context, arg1 *admin.ID) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCountryByID", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCountryByID indicates an expected call of DeleteCountryByID
func (mr *MockAdminPanelServerMockRecorder) DeleteCountryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCountryByID", reflect.TypeOf((*MockAdminPanelServer)(nil).DeleteCountryByID), arg0, arg1)
}

// CreateGenre mocks base method
func (m *MockAdminPanelServer) CreateGenre(arg0 context.Context, arg1 *admin.Genre) (*admin.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", arg0, arg1)
	ret0, _ := ret[0].(*admin.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenre indicates an expected call of CreateGenre
func (mr *MockAdminPanelServerMockRecorder) CreateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockAdminPanelServer)(nil).CreateGenre), arg0, arg1)
}

// ChangeGenre mocks base method
func (m *MockAdminPanelServer) ChangeGenre(arg0 context.Context, arg1 *admin.Genre) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeGenre", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeGenre indicates an expected call of ChangeGenre
func (mr *MockAdminPanelServerMockRecorder) ChangeGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeGenre", reflect.TypeOf((*MockAdminPanelServer)(nil).ChangeGenre), arg0, arg1)
}

// DeleteGenreByID mocks base method
func (m *MockAdminPanelServer) DeleteGenreByID(arg0 context.Context, arg1 *admin.ID) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGenreByID", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGenreByID indicates an expected call of DeleteGenreByID
func (mr *MockAdminPanelServerMockRecorder) DeleteGenreByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenreByID", reflect.TypeOf((*MockAdminPanelServer)(nil).DeleteGenreByID), arg0, arg1)
}

// CreateMovie mocks base method
func (m *MockAdminPanelServer) CreateMovie(arg0 context.Context, arg1 *admin.Movie) (*admin.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", arg0, arg1)
	ret0, _ := ret[0].(*admin.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie
func (mr *MockAdminPanelServerMockRecorder) CreateMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockAdminPanelServer)(nil).CreateMovie), arg0, arg1)
}

// ChangeVideo mocks base method
func (m *MockAdminPanelServer) ChangeVideo(arg0 context.Context, arg1 *admin.VideoMovie) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeVideo", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeVideo indicates an expected call of ChangeVideo
func (mr *MockAdminPanelServerMockRecorder) ChangeVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeVideo", reflect.TypeOf((*MockAdminPanelServer)(nil).ChangeVideo), arg0, arg1)
}

// DeleteMovieByID mocks base method
func (m *MockAdminPanelServer) DeleteMovieByID(arg0 context.Context, arg1 *admin.ID) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieByID", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMovieByID indicates an expected call of DeleteMovieByID
func (mr *MockAdminPanelServerMockRecorder) DeleteMovieByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieByID", reflect.TypeOf((*MockAdminPanelServer)(nil).DeleteMovieByID), arg0, arg1)
}

// CreateTVShow mocks base method
func (m *MockAdminPanelServer) CreateTVShow(arg0 context.Context, arg1 *admin.TVShow) (*admin.TVShow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTVShow", arg0, arg1)
	ret0, _ := ret[0].(*admin.TVShow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTVShow indicates an expected call of CreateTVShow
func (mr *MockAdminPanelServerMockRecorder) CreateTVShow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTVShow", reflect.TypeOf((*MockAdminPanelServer)(nil).CreateTVShow), arg0, arg1)
}

// ChangePosters mocks base method
func (m *MockAdminPanelServer) ChangePosters(arg0 context.Context, arg1 *admin.ContentPostersDir) (*admin.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePosters", arg0, arg1)
	ret0, _ := ret[0].(*admin.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePosters indicates an expected call of ChangePosters
func (mr *MockAdminPanelServerMockRecorder) ChangePosters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePosters", reflect.TypeOf((*MockAdminPanelServer)(nil).ChangePosters), arg0, arg1)
}

// ChangeContent mocks base method
func (m *MockAdminPanelServer) ChangeContent(arg0 context.Context, arg1 *admin.Content) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeContent", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeContent indicates an expected call of ChangeContent
func (mr *MockAdminPanelServerMockRecorder) ChangeContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeContent", reflect.TypeOf((*MockAdminPanelServer)(nil).ChangeContent), arg0, arg1)
}

// DeleteContentByID mocks base method
func (m *MockAdminPanelServer) DeleteContentByID(arg0 context.Context, arg1 *admin.ID) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContentByID", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContentByID indicates an expected call of DeleteContentByID
func (mr *MockAdminPanelServerMockRecorder) DeleteContentByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContentByID", reflect.TypeOf((*MockAdminPanelServer)(nil).DeleteContentByID), arg0, arg1)
}

// CreateSeason mocks base method
func (m *MockAdminPanelServer) CreateSeason(arg0 context.Context, arg1 *admin.Season) (*admin.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeason", arg0, arg1)
	ret0, _ := ret[0].(*admin.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSeason indicates an expected call of CreateSeason
func (mr *MockAdminPanelServerMockRecorder) CreateSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeason", reflect.TypeOf((*MockAdminPanelServer)(nil).CreateSeason), arg0, arg1)
}

// ChangeSeason mocks base method
func (m *MockAdminPanelServer) ChangeSeason(arg0 context.Context, arg1 *admin.Season) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSeason", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSeason indicates an expected call of ChangeSeason
func (mr *MockAdminPanelServerMockRecorder) ChangeSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSeason", reflect.TypeOf((*MockAdminPanelServer)(nil).ChangeSeason), arg0, arg1)
}

// DeleteSeasonsByID mocks base method
func (m *MockAdminPanelServer) DeleteSeasonsByID(arg0 context.Context, arg1 *admin.ID) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeasonsByID", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSeasonsByID indicates an expected call of DeleteSeasonsByID
func (mr *MockAdminPanelServerMockRecorder) DeleteSeasonsByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeasonsByID", reflect.TypeOf((*MockAdminPanelServer)(nil).DeleteSeasonsByID), arg0, arg1)
}

// CreateEpisode mocks base method
func (m *MockAdminPanelServer) CreateEpisode(arg0 context.Context, arg1 *admin.Episode) (*admin.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEpisode", arg0, arg1)
	ret0, _ := ret[0].(*admin.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEpisode indicates an expected call of CreateEpisode
func (mr *MockAdminPanelServerMockRecorder) CreateEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpisode", reflect.TypeOf((*MockAdminPanelServer)(nil).CreateEpisode), arg0, arg1)
}

// ChangeEpisode mocks base method
func (m *MockAdminPanelServer) ChangeEpisode(arg0 context.Context, arg1 *admin.Episode) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeEpisode", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeEpisode indicates an expected call of ChangeEpisode
func (mr *MockAdminPanelServerMockRecorder) ChangeEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEpisode", reflect.TypeOf((*MockAdminPanelServer)(nil).ChangeEpisode), arg0, arg1)
}

// UpdatePoster mocks base method
func (m *MockAdminPanelServer) UpdatePoster(arg0 context.Context, arg1 *admin.EpisodePostersDir) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePoster", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePoster indicates an expected call of UpdatePoster
func (mr *MockAdminPanelServerMockRecorder) UpdatePoster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoster", reflect.TypeOf((*MockAdminPanelServer)(nil).UpdatePoster), arg0, arg1)
}

// UpdateVideo mocks base method
func (m *MockAdminPanelServer) UpdateVideo(arg0 context.Context, arg1 *admin.EpisodeVideo) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVideo indicates an expected call of UpdateVideo
func (mr *MockAdminPanelServerMockRecorder) UpdateVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockAdminPanelServer)(nil).UpdateVideo), arg0, arg1)
}

// DeleteEpisodeByID mocks base method
func (m *MockAdminPanelServer) DeleteEpisodeByID(arg0 context.Context, arg1 *admin.ID) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEpisodeByID", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEpisodeByID indicates an expected call of DeleteEpisodeByID
func (mr *MockAdminPanelServerMockRecorder) DeleteEpisodeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpisodeByID", reflect.TypeOf((*MockAdminPanelServer)(nil).DeleteEpisodeByID), arg0, arg1)
}
