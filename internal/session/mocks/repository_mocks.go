// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_session is a generated GoMock package.
package mocks

import (
models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
gomock "github.com/golang/mock/gomock"
reflect "reflect"
)

// MockSessionRepository is a mock of SessionRepository interface
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockSessionRepository) Insert(session *models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockSessionRepositoryMockRecorder) Insert(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSessionRepository)(nil).Insert), session)
}

// SelectByValue mocks base method
func (m *MockSessionRepository) SelectByValue(sessValue string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByValue", sessValue)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByValue indicates an expected call of SelectByValue
func (mr *MockSessionRepositoryMockRecorder) SelectByValue(sessValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByValue", reflect.TypeOf((*MockSessionRepository)(nil).SelectByValue), sessValue)
}

// DeleteByValue mocks base method
func (m *MockSessionRepository) DeleteByValue(sessionValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByValue", sessionValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByValue indicates an expected call of DeleteByValue
func (mr *MockSessionRepositoryMockRecorder) DeleteByValue(sessionValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByValue", reflect.TypeOf((*MockSessionRepository)(nil).DeleteByValue), sessionValue)
}

