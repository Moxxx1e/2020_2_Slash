// Code generated by MockGen. DO NOT EDIT.
// Source: session.pb.go

// Package mock_grpc is a generated GoMock package.
package mocks

import (
	context "context"
	grpc "github.com/go-park-mail-ru/2020_2_Slash/internal/session/delivery/grpc"
	gomock "github.com/golang/mock/gomock"
	grpc0 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
)

// MockSessionBlockClient is a mock of SessionBlockClient interface
type MockSessionBlockClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionBlockClientMockRecorder
}

// MockSessionBlockClientMockRecorder is the mock recorder for MockSessionBlockClient
type MockSessionBlockClientMockRecorder struct {
	mock *MockSessionBlockClient
}

// NewMockSessionBlockClient creates a new mock instance
func NewMockSessionBlockClient(ctrl *gomock.Controller) *MockSessionBlockClient {
	mock := &MockSessionBlockClient{ctrl: ctrl}
	mock.recorder = &MockSessionBlockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionBlockClient) EXPECT() *MockSessionBlockClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessionBlockClient) Create(ctx context.Context, in *grpc.Session, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionBlockClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionBlockClient)(nil).Create), varargs...)
}

// Get mocks base method
func (m *MockSessionBlockClient) Get(ctx context.Context, in *grpc.SessionValue, opts ...grpc0.CallOption) (*grpc.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*grpc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSessionBlockClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionBlockClient)(nil).Get), varargs...)
}

// Delete mocks base method
func (m *MockSessionBlockClient) Delete(ctx context.Context, in *grpc.SessionValue, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSessionBlockClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionBlockClient)(nil).Delete), varargs...)
}

// Check mocks base method
func (m *MockSessionBlockClient) Check(ctx context.Context, in *grpc.SessionValue, opts ...grpc0.CallOption) (*grpc.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*grpc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockSessionBlockClientMockRecorder) Check(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionBlockClient)(nil).Check), varargs...)
}

// MockSessionBlockServer is a mock of SessionBlockServer interface
type MockSessionBlockServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionBlockServerMockRecorder
}

// MockSessionBlockServerMockRecorder is the mock recorder for MockSessionBlockServer
type MockSessionBlockServerMockRecorder struct {
	mock *MockSessionBlockServer
}

// NewMockSessionBlockServer creates a new mock instance
func NewMockSessionBlockServer(ctrl *gomock.Controller) *MockSessionBlockServer {
	mock := &MockSessionBlockServer{ctrl: ctrl}
	mock.recorder = &MockSessionBlockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionBlockServer) EXPECT() *MockSessionBlockServerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSessionBlockServer) Create(arg0 context.Context, arg1 *grpc.Session) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSessionBlockServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionBlockServer)(nil).Create), arg0, arg1)
}

// Get mocks base method
func (m *MockSessionBlockServer) Get(arg0 context.Context, arg1 *grpc.SessionValue) (*grpc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*grpc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSessionBlockServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionBlockServer)(nil).Get), arg0, arg1)
}

// Delete mocks base method
func (m *MockSessionBlockServer) Delete(arg0 context.Context, arg1 *grpc.SessionValue) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockSessionBlockServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionBlockServer)(nil).Delete), arg0, arg1)
}

// Check mocks base method
func (m *MockSessionBlockServer) Check(arg0 context.Context, arg1 *grpc.SessionValue) (*grpc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*grpc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check
func (mr *MockSessionBlockServerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionBlockServer)(nil).Check), arg0, arg1)
}
