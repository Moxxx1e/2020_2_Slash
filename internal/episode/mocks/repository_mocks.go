// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_episode is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEpisodeRepository is a mock of EpisodeRepository interface
type MockEpisodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEpisodeRepositoryMockRecorder
}

// MockEpisodeRepositoryMockRecorder is the mock recorder for MockEpisodeRepository
type MockEpisodeRepositoryMockRecorder struct {
	mock *MockEpisodeRepository
}

// NewMockEpisodeRepository creates a new mock instance
func NewMockEpisodeRepository(ctrl *gomock.Controller) *MockEpisodeRepository {
	mock := &MockEpisodeRepository{ctrl: ctrl}
	mock.recorder = &MockEpisodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEpisodeRepository) EXPECT() *MockEpisodeRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockEpisodeRepository) Insert(episode *models.Episode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", episode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockEpisodeRepositoryMockRecorder) Insert(episode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockEpisodeRepository)(nil).Insert), episode)
}

// Update mocks base method
func (m *MockEpisodeRepository) Update(newEpisode *models.Episode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", newEpisode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockEpisodeRepositoryMockRecorder) Update(newEpisode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEpisodeRepository)(nil).Update), newEpisode)
}

// SelectByID mocks base method
func (m *MockEpisodeRepository) SelectByID(id uint64) (*models.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", id)
	ret0, _ := ret[0].(*models.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockEpisodeRepositoryMockRecorder) SelectByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockEpisodeRepository)(nil).SelectByID), id)
}

// SelectByNumberAndSeason mocks base method
func (m *MockEpisodeRepository) SelectByNumberAndSeason(number int, seasonID uint64) (*models.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByNumberAndSeason", number, seasonID)
	ret0, _ := ret[0].(*models.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByNumberAndSeason indicates an expected call of SelectByNumberAndSeason
func (mr *MockEpisodeRepositoryMockRecorder) SelectByNumberAndSeason(number, seasonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByNumberAndSeason", reflect.TypeOf((*MockEpisodeRepository)(nil).SelectByNumberAndSeason), number, seasonID)
}

// SelectContentByID mocks base method
func (m *MockEpisodeRepository) SelectContentByID(id uint64) (*models.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectContentByID", id)
	ret0, _ := ret[0].(*models.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectContentByID indicates an expected call of SelectContentByID
func (mr *MockEpisodeRepositoryMockRecorder) SelectContentByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContentByID", reflect.TypeOf((*MockEpisodeRepository)(nil).SelectContentByID), id)
}

// SelectSeasonNumberByID mocks base method
func (m *MockEpisodeRepository) SelectSeasonNumberByID(id uint64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectSeasonNumberByID", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectSeasonNumberByID indicates an expected call of SelectSeasonNumberByID
func (mr *MockEpisodeRepositoryMockRecorder) SelectSeasonNumberByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectSeasonNumberByID", reflect.TypeOf((*MockEpisodeRepository)(nil).SelectSeasonNumberByID), id)
}

// DeleteByID mocks base method
func (m *MockEpisodeRepository) DeleteByID(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockEpisodeRepositoryMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockEpisodeRepository)(nil).DeleteByID), id)
}

// UpdatePoster mocks base method
func (m *MockEpisodeRepository) UpdatePoster(episode *models.Episode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePoster", episode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePoster indicates an expected call of UpdatePoster
func (mr *MockEpisodeRepositoryMockRecorder) UpdatePoster(episode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoster", reflect.TypeOf((*MockEpisodeRepository)(nil).UpdatePoster), episode)
}

// UpdateVideo mocks base method
func (m *MockEpisodeRepository) UpdateVideo(episode *models.Episode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", episode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideo indicates an expected call of UpdateVideo
func (mr *MockEpisodeRepositoryMockRecorder) UpdateVideo(episode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockEpisodeRepository)(nil).UpdateVideo), episode)
}
