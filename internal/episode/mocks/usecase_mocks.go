// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_episode is a generated GoMock package.
package mocks

import (
	errors "github.com/go-park-mail-ru/2020_2_Slash/internal/helpers/errors"
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEpisodeUsecase is a mock of EpisodeUsecase interface
type MockEpisodeUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEpisodeUsecaseMockRecorder
}

// MockEpisodeUsecaseMockRecorder is the mock recorder for MockEpisodeUsecase
type MockEpisodeUsecaseMockRecorder struct {
	mock *MockEpisodeUsecase
}

// NewMockEpisodeUsecase creates a new mock instance
func NewMockEpisodeUsecase(ctrl *gomock.Controller) *MockEpisodeUsecase {
	mock := &MockEpisodeUsecase{ctrl: ctrl}
	mock.recorder = &MockEpisodeUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEpisodeUsecase) EXPECT() *MockEpisodeUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockEpisodeUsecase) Create(episode *models.Episode) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", episode)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockEpisodeUsecaseMockRecorder) Create(episode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEpisodeUsecase)(nil).Create), episode)
}

// Change mocks base method
func (m *MockEpisodeUsecase) Change(episode *models.Episode) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", episode)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Change indicates an expected call of Change
func (mr *MockEpisodeUsecaseMockRecorder) Change(episode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockEpisodeUsecase)(nil).Change), episode)
}

// GetByID mocks base method
func (m *MockEpisodeUsecase) GetByID(id uint64) (*models.Episode, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Episode)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockEpisodeUsecaseMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEpisodeUsecase)(nil).GetByID), id)
}

// DeleteByID mocks base method
func (m *MockEpisodeUsecase) DeleteByID(id uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockEpisodeUsecaseMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockEpisodeUsecase)(nil).DeleteByID), id)
}

// GetContentByEID mocks base method
func (m *MockEpisodeUsecase) GetContentByEID(eid uint64) (*models.Content, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentByEID", eid)
	ret0, _ := ret[0].(*models.Content)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetContentByEID indicates an expected call of GetContentByEID
func (mr *MockEpisodeUsecaseMockRecorder) GetContentByEID(eid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByEID", reflect.TypeOf((*MockEpisodeUsecase)(nil).GetContentByEID), eid)
}

// GetSeasonNumber mocks base method
func (m *MockEpisodeUsecase) GetSeasonNumber(eid uint64) (int, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeasonNumber", eid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetSeasonNumber indicates an expected call of GetSeasonNumber
func (mr *MockEpisodeUsecaseMockRecorder) GetSeasonNumber(eid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeasonNumber", reflect.TypeOf((*MockEpisodeUsecase)(nil).GetSeasonNumber), eid)
}

// UpdatePoster mocks base method
func (m *MockEpisodeUsecase) UpdatePoster(episode *models.Episode, posters string) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePoster", episode, posters)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// UpdatePoster indicates an expected call of UpdatePoster
func (mr *MockEpisodeUsecaseMockRecorder) UpdatePoster(episode, posters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoster", reflect.TypeOf((*MockEpisodeUsecase)(nil).UpdatePoster), episode, posters)
}

// UpdateVideo mocks base method
func (m *MockEpisodeUsecase) UpdateVideo(episode *models.Episode, video string) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", episode, video)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// UpdateVideo indicates an expected call of UpdateVideo
func (mr *MockEpisodeUsecaseMockRecorder) UpdateVideo(episode, video interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockEpisodeUsecase)(nil).UpdateVideo), episode, video)
}

