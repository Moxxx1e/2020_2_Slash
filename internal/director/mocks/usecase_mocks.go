// Code generated by MockGen. DO NOT EDIT.
// Source: internal/director/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	errors "github.com/go-park-mail-ru/2020_2_Slash/internal/helpers/errors"
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDirectorUseCase is a mocks of DirectorUseCase interface
type MockDirectorUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockDirectorUseCaseMockRecorder
}

// MockDirectorUseCaseMockRecorder is the mocks recorder for MockDirectorUseCase
type MockDirectorUseCaseMockRecorder struct {
	mock *MockDirectorUseCase
}

// NewMockDirectorUseCase creates a new mocks instance
func NewMockDirectorUseCase(ctrl *gomock.Controller) *MockDirectorUseCase {
	mock := &MockDirectorUseCase{ctrl: ctrl}
	mock.recorder = &MockDirectorUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirectorUseCase) EXPECT() *MockDirectorUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDirectorUseCase) Create(director *models.Director) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", director)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDirectorUseCaseMockRecorder) Create(director interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDirectorUseCase)(nil).Create), director)
}

// Get mocks base method
func (m *MockDirectorUseCase) Get(id uint64) (*models.Director, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Director)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDirectorUseCaseMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDirectorUseCase)(nil).Get), id)
}

// Change mocks base method
func (m *MockDirectorUseCase) Change(newDirector *models.Director) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", newDirector)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Change indicates an expected call of Change
func (mr *MockDirectorUseCaseMockRecorder) Change(newDirector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockDirectorUseCase)(nil).Change), newDirector)
}

// DeleteById mocks base method
func (m *MockDirectorUseCase) DeleteById(id uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById
func (mr *MockDirectorUseCaseMockRecorder) DeleteById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockDirectorUseCase)(nil).DeleteById), id)
}

// ListByID mocks base method
func (m *MockDirectorUseCase) ListByID(directorsID []uint64) ([]*models.Director, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByID", directorsID)
	ret0, _ := ret[0].([]*models.Director)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ListByID indicates an expected call of ListByID
func (mr *MockDirectorUseCaseMockRecorder) ListByID(directorsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByID", reflect.TypeOf((*MockDirectorUseCase)(nil).ListByID), directorsID)
}
