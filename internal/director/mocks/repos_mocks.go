// Code generated by MockGen. DO NOT EDIT.
// Source: internal/director/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDirectorRepository is a mock of DirectorRepository interface
type MockDirectorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDirectorRepositoryMockRecorder
}

// MockDirectorRepositoryMockRecorder is the mock recorder for MockDirectorRepository
type MockDirectorRepositoryMockRecorder struct {
	mock *MockDirectorRepository
}

// NewMockDirectorRepository creates a new mock instance
func NewMockDirectorRepository(ctrl *gomock.Controller) *MockDirectorRepository {
	mock := &MockDirectorRepository{ctrl: ctrl}
	mock.recorder = &MockDirectorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirectorRepository) EXPECT() *MockDirectorRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockDirectorRepository) Insert(director *models.Director) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", director)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockDirectorRepositoryMockRecorder) Insert(director interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDirectorRepository)(nil).Insert), director)
}

// Update mocks base method
func (m *MockDirectorRepository) Update(director *models.Director) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", director)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDirectorRepositoryMockRecorder) Update(director interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDirectorRepository)(nil).Update), director)
}

// DeleteById mocks base method
func (m *MockDirectorRepository) DeleteById(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById
func (mr *MockDirectorRepositoryMockRecorder) DeleteById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockDirectorRepository)(nil).DeleteById), id)
}

// SelectById mocks base method
func (m *MockDirectorRepository) SelectById(id uint64) (*models.Director, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectById", id)
	ret0, _ := ret[0].(*models.Director)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectById indicates an expected call of SelectById
func (mr *MockDirectorRepositoryMockRecorder) SelectById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectById", reflect.TypeOf((*MockDirectorRepository)(nil).SelectById), id)
}

// SelectAll mocks base method
func (m *MockDirectorRepository) SelectAll(pgnt *models.Pagination) ([]*models.Director, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", pgnt)
	ret0, _ := ret[0].([]*models.Director)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll
func (mr *MockDirectorRepositoryMockRecorder) SelectAll(pgnt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockDirectorRepository)(nil).SelectAll), pgnt)
}
