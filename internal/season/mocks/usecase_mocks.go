// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_season is a generated GoMock package.
package mocks

import (
	errors "github.com/go-park-mail-ru/2020_2_Slash/internal/helpers/errors"
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSeasonUsecase is a mock of SeasonUsecase interface
type MockSeasonUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSeasonUsecaseMockRecorder
}

// MockSeasonUsecaseMockRecorder is the mock recorder for MockSeasonUsecase
type MockSeasonUsecaseMockRecorder struct {
	mock *MockSeasonUsecase
}

// NewMockSeasonUsecase creates a new mock instance
func NewMockSeasonUsecase(ctrl *gomock.Controller) *MockSeasonUsecase {
	mock := &MockSeasonUsecase{ctrl: ctrl}
	mock.recorder = &MockSeasonUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeasonUsecase) EXPECT() *MockSeasonUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSeasonUsecase) Create(season *models.Season) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", season)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSeasonUsecaseMockRecorder) Create(season interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSeasonUsecase)(nil).Create), season)
}

// Change mocks base method
func (m *MockSeasonUsecase) Change(season *models.Season) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", season)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Change indicates an expected call of Change
func (mr *MockSeasonUsecaseMockRecorder) Change(season interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockSeasonUsecase)(nil).Change), season)
}

// Get mocks base method
func (m *MockSeasonUsecase) Get(id uint64) (*models.Season, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*models.Season)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSeasonUsecaseMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSeasonUsecase)(nil).Get), id)
}

// GetEpisodes mocks base method
func (m *MockSeasonUsecase) GetEpisodes(id uint64) ([]*models.Episode, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpisodes", id)
	ret0, _ := ret[0].([]*models.Episode)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetEpisodes indicates an expected call of GetEpisodes
func (mr *MockSeasonUsecaseMockRecorder) GetEpisodes(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpisodes", reflect.TypeOf((*MockSeasonUsecase)(nil).GetEpisodes), id)
}

// Delete mocks base method
func (m *MockSeasonUsecase) Delete(id uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSeasonUsecaseMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSeasonUsecase)(nil).Delete), id)
}

// ListByTVShow mocks base method
func (m *MockSeasonUsecase) ListByTVShow(tvshowID uint64) ([]*models.Season, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTVShow", tvshowID)
	ret0, _ := ret[0].([]*models.Season)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ListByTVShow indicates an expected call of ListByTVShow
func (mr *MockSeasonUsecaseMockRecorder) ListByTVShow(tvshowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTVShow", reflect.TypeOf((*MockSeasonUsecase)(nil).ListByTVShow), tvshowID)
}
