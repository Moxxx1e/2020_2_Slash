// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_season is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSeasonRepository is a mock of SeasonRepository interface
type MockSeasonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSeasonRepositoryMockRecorder
}

// MockSeasonRepositoryMockRecorder is the mock recorder for MockSeasonRepository
type MockSeasonRepositoryMockRecorder struct {
	mock *MockSeasonRepository
}

// NewMockSeasonRepository creates a new mock instance
func NewMockSeasonRepository(ctrl *gomock.Controller) *MockSeasonRepository {
	mock := &MockSeasonRepository{ctrl: ctrl}
	mock.recorder = &MockSeasonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeasonRepository) EXPECT() *MockSeasonRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockSeasonRepository) Insert(season *models.Season) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", season)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockSeasonRepositoryMockRecorder) Insert(season interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSeasonRepository)(nil).Insert), season)
}

// Update mocks base method
func (m *MockSeasonRepository) Update(season *models.Season) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", season)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSeasonRepositoryMockRecorder) Update(season interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSeasonRepository)(nil).Update), season)
}

// SelectByID mocks base method
func (m *MockSeasonRepository) SelectByID(id uint64) (*models.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", id)
	ret0, _ := ret[0].(*models.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockSeasonRepositoryMockRecorder) SelectByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockSeasonRepository)(nil).SelectByID), id)
}

// Select mocks base method
func (m *MockSeasonRepository) Select(season *models.Season) (*models.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", season)
	ret0, _ := ret[0].(*models.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select
func (mr *MockSeasonRepositoryMockRecorder) Select(season interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockSeasonRepository)(nil).Select), season)
}

// SelectEpisodes mocks base method
func (m *MockSeasonRepository) SelectEpisodes(id uint64) ([]*models.Episode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectEpisodes", id)
	ret0, _ := ret[0].([]*models.Episode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectEpisodes indicates an expected call of SelectEpisodes
func (mr *MockSeasonRepositoryMockRecorder) SelectEpisodes(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectEpisodes", reflect.TypeOf((*MockSeasonRepository)(nil).SelectEpisodes), id)
}

// Delete mocks base method
func (m *MockSeasonRepository) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSeasonRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSeasonRepository)(nil).Delete), id)
}

// SelectByTVShow mocks base method
func (m *MockSeasonRepository) SelectByTVShow(tvshowID uint64) ([]*models.Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByTVShow", tvshowID)
	ret0, _ := ret[0].([]*models.Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByTVShow indicates an expected call of SelectByTVShow
func (mr *MockSeasonRepositoryMockRecorder) SelectByTVShow(tvshowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByTVShow", reflect.TypeOf((*MockSeasonRepository)(nil).SelectByTVShow), tvshowID)
}
