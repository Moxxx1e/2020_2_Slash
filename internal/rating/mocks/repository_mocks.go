// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_rating is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRatingRepository is a mock of RatingRepository interface
type MockRatingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRatingRepositoryMockRecorder
}

// MockRatingRepositoryMockRecorder is the mock recorder for MockRatingRepository
type MockRatingRepositoryMockRecorder struct {
	mock *MockRatingRepository
}

// NewMockRatingRepository creates a new mock instance
func NewMockRatingRepository(ctrl *gomock.Controller) *MockRatingRepository {
	mock := &MockRatingRepository{ctrl: ctrl}
	mock.recorder = &MockRatingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRatingRepository) EXPECT() *MockRatingRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockRatingRepository) Insert(rating *models.Rating) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockRatingRepositoryMockRecorder) Insert(rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRatingRepository)(nil).Insert), rating)
}

// SelectByUserIDContentID mocks base method
func (m *MockRatingRepository) SelectByUserIDContentID(userID, contentID uint64) (*models.Rating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByUserIDContentID", userID, contentID)
	ret0, _ := ret[0].(*models.Rating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByUserIDContentID indicates an expected call of SelectByUserIDContentID
func (mr *MockRatingRepositoryMockRecorder) SelectByUserIDContentID(userID, contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserIDContentID", reflect.TypeOf((*MockRatingRepository)(nil).SelectByUserIDContentID), userID, contentID)
}

// SelectRatesCount mocks base method
func (m *MockRatingRepository) SelectRatesCount(contentID uint64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRatesCount", contentID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRatesCount indicates an expected call of SelectRatesCount
func (mr *MockRatingRepositoryMockRecorder) SelectRatesCount(contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRatesCount", reflect.TypeOf((*MockRatingRepository)(nil).SelectRatesCount), contentID)
}

// SelectLikesCount mocks base method
func (m *MockRatingRepository) SelectLikesCount(contentID uint64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLikesCount", contentID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLikesCount indicates an expected call of SelectLikesCount
func (mr *MockRatingRepositoryMockRecorder) SelectLikesCount(contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLikesCount", reflect.TypeOf((*MockRatingRepository)(nil).SelectLikesCount), contentID)
}

// Update mocks base method
func (m *MockRatingRepository) Update(rating *models.Rating) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRatingRepositoryMockRecorder) Update(rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRatingRepository)(nil).Update), rating)
}

// Delete mocks base method
func (m *MockRatingRepository) Delete(rating *models.Rating) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRatingRepositoryMockRecorder) Delete(rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRatingRepository)(nil).Delete), rating)
}
