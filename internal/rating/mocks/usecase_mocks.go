// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_rating is a generated GoMock package.
package mocks

import (
errors "github.com/go-park-mail-ru/2020_2_Slash/internal/helpers/errors"
models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
gomock "github.com/golang/mock/gomock"
reflect "reflect"
)

// MockRatingUsecase is a mock of RatingUsecase interface
type MockRatingUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRatingUsecaseMockRecorder
}

// MockRatingUsecaseMockRecorder is the mock recorder for MockRatingUsecase
type MockRatingUsecaseMockRecorder struct {
	mock *MockRatingUsecase
}

// NewMockRatingUsecase creates a new mock instance
func NewMockRatingUsecase(ctrl *gomock.Controller) *MockRatingUsecase {
	mock := &MockRatingUsecase{ctrl: ctrl}
	mock.recorder = &MockRatingUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRatingUsecase) EXPECT() *MockRatingUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRatingUsecase) Create(rating *models.Rating) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", rating)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRatingUsecaseMockRecorder) Create(rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRatingUsecase)(nil).Create), rating)
}

// Change mocks base method
func (m *MockRatingUsecase) Change(rating *models.Rating) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Change", rating)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Change indicates an expected call of Change
func (mr *MockRatingUsecaseMockRecorder) Change(rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Change", reflect.TypeOf((*MockRatingUsecase)(nil).Change), rating)
}

// GetByUserIDContentID mocks base method
func (m *MockRatingUsecase) GetByUserIDContentID(userID, contentID uint64) (*models.Rating, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDContentID", userID, contentID)
	ret0, _ := ret[0].(*models.Rating)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetByUserIDContentID indicates an expected call of GetByUserIDContentID
func (mr *MockRatingUsecaseMockRecorder) GetByUserIDContentID(userID, contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDContentID", reflect.TypeOf((*MockRatingUsecase)(nil).GetByUserIDContentID), userID, contentID)
}

// GetContentRating mocks base method
func (m *MockRatingUsecase) GetContentRating(contentID uint64) (int, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentRating", contentID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetContentRating indicates an expected call of GetContentRating
func (mr *MockRatingUsecaseMockRecorder) GetContentRating(contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentRating", reflect.TypeOf((*MockRatingUsecase)(nil).GetContentRating), contentID)
}

// Delete mocks base method
func (m *MockRatingUsecase) Delete(rating *models.Rating) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", rating)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRatingUsecaseMockRecorder) Delete(rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRatingUsecase)(nil).Delete), rating)
}

