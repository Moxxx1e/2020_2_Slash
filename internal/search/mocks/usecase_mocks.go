// Code generated by MockGen. DO NOT EDIT.
// Source: internal/search/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	errors "github.com/go-park-mail-ru/2020_2_Slash/internal/helpers/errors"
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSearchUsecase is a mock of SearchUsecase interface
type MockSearchUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchUsecaseMockRecorder
}

// MockSearchUsecaseMockRecorder is the mock recorder for MockSearchUsecase
type MockSearchUsecaseMockRecorder struct {
	mock *MockSearchUsecase
}

// NewMockSearchUsecase creates a new mock instance
func NewMockSearchUsecase(ctrl *gomock.Controller) *MockSearchUsecase {
	mock := &MockSearchUsecase{ctrl: ctrl}
	mock.recorder = &MockSearchUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchUsecase) EXPECT() *MockSearchUsecaseMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockSearchUsecase) Search(curUserID uint64, query string, pagination *models.Pagination) (*models.SearchResult, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", curUserID, query, pagination)
	ret0, _ := ret[0].(*models.SearchResult)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockSearchUsecaseMockRecorder) Search(curUserID, query, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchUsecase)(nil).Search), curUserID, query, pagination)
}
