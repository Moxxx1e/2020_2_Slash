// Code generated by MockGen. DO NOT EDIT.
// Source: internal/genre/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_2_Slash/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGenreRepository is a mocks of GenreRepository interface
type MockGenreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGenreRepositoryMockRecorder
}

// MockGenreRepositoryMockRecorder is the mocks recorder for MockGenreRepository
type MockGenreRepositoryMockRecorder struct {
	mock *MockGenreRepository
}

// NewMockGenreRepository creates a new mocks instance
func NewMockGenreRepository(ctrl *gomock.Controller) *MockGenreRepository {
	mock := &MockGenreRepository{ctrl: ctrl}
	mock.recorder = &MockGenreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGenreRepository) EXPECT() *MockGenreRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockGenreRepository) Insert(genre *models.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", genre)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockGenreRepositoryMockRecorder) Insert(genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGenreRepository)(nil).Insert), genre)
}

// Update mocks base method
func (m *MockGenreRepository) Update(genre *models.Genre) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", genre)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockGenreRepositoryMockRecorder) Update(genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGenreRepository)(nil).Update), genre)
}

// DeleteByID mocks base method
func (m *MockGenreRepository) DeleteByID(genreID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", genreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockGenreRepositoryMockRecorder) DeleteByID(genreID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockGenreRepository)(nil).DeleteByID), genreID)
}

// SelectByID mocks base method
func (m *MockGenreRepository) SelectByID(genreID uint64) (*models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", genreID)
	ret0, _ := ret[0].(*models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID
func (mr *MockGenreRepositoryMockRecorder) SelectByID(genreID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockGenreRepository)(nil).SelectByID), genreID)
}

// SelectByName mocks base method
func (m *MockGenreRepository) SelectByName(name string) (*models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByName", name)
	ret0, _ := ret[0].(*models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByName indicates an expected call of SelectByName
func (mr *MockGenreRepositoryMockRecorder) SelectByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByName", reflect.TypeOf((*MockGenreRepository)(nil).SelectByName), name)
}

// SelectAll mocks base method
func (m *MockGenreRepository) SelectAll() ([]*models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll")
	ret0, _ := ret[0].([]*models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll
func (mr *MockGenreRepositoryMockRecorder) SelectAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockGenreRepository)(nil).SelectAll))
}
